%Project 3 - G1

%Parameters and Matrices Used
g = 9.81; 
m = 0.035;
zI = [0;0;1];
d = 0.2056;
nx = 6;
ny = 6;

A=[zeros(6,3) [eye(3); -d*eye(3)]];
B=[zeros(3,3); eye(3)];
C=[eye(6)];
D = zeros(6,6); 


% System Controlabillity and Observability

ctr=rank(ctrb(A,B));
obs=rank(obsv(A,C));

if ctr==nx
    disp('System is controllable')
else
    disp('System is not controllable')
end
if obs == nx
   disp('System is observable')
else
    disp('System is not observable')
end
   
%LQR Controller - Testing

    %Q = diag([1,1,1,1,1,1]);
    Q= eye(6);  % Similar Matrices to the ones used in Project 2 to keep the coherence
    R= eye(3);
    K_lqr = lqr(A,B,Q,R);
    % Stability check
    lbd_CL_lqr = eig(A-B*K_lqr); 
    if any(real(lbd_CL_lqr) >= 0), disp('System with LQR is not stable');
    else, disp('System with LQR is stable'); end


%LQR controller - Simulation with linear model

%State-space simulation

Dt =0.01;
t = 0:Dt:15; 
NSim = length(t);
x = zeros(nx,NSim);
x(:,1) = [1; 1.2; 1.4; 0; 0; 0]; % Initial condition (arbitrary)
y = zeros(6,NSim);
u = zeros(3,NSim);

for k = 1:NSim

    % Get measurements:
    y(:,k) = C*x(:,k);
    % Basic LQR controller
    u(:,k) = -K_lqr*x(:,k); 
    % Simulate system
    x_dot = A*x(:,k) + B*u(:,k); 
    xp = x(:,k) + Dt*x_dot; 

    if k < NSim
        x(:,k+1) = xp;
    end

    end

    figure(1);
    subplot(3,1,1);
    plot(t, y(1,:), t, y(2,:), t, y(3,:));
    title('Linear Model - Position without following a reference');
    xlabel('Time (s)');
    ylabel('Position (m)');
    legend('x', 'y', 'z');

    subplot(3,1,2);
    plot(t, y(4,:), t, y(5,:), t, y(6,:));
    title('Linear Model - Velocity without following a reference');
    xlabel('Time (s)');
    ylabel('Velocity (m/s)');
    legend('$$v_x$$', '$$v_y$$', '$$v_z$$');

    subplot(3,1,3);
    plot(t, u);
    title('Linear Model - Control input');
    xlabel('Time (s)');
    ylabel('Control input');
    legend('$$u_{ax}$$', '$$u_{ay}$$', '$$u_{az}$$');


%LQR controller - Simulation with nonlinear model

x = zeros(6, NSim);
x(:,1) = [1; 1.2; 1.4; 0; 0; 0]; % Initial State
y = zeros(ny, NSim);
u = zeros(3, NSim);

for k = 1:NSim

    % Get initial state data
    p = x(1:3,k);
    v = x(4:6,k);
    % Basic LQR controller
    u(:, k) = - K_lqr *x(:,k);
    % Simulate system
    p_dot = v;
    v_dot = u(:,k);
    x_dot = [p_dot; v_dot];
    % Integrate state
    x(:,k+1) = x(:,k) + Dt * x_dot;
    % Actual output
    y(:,k) = C*x(:, k);
end


figure(2);
subplot(3,1,1);
plot(t, y(1,:), t, y(2,:), t, y(3,:));
title('Nonlinear Model - Position without following a reference');
xlabel('Time (s)');
ylabel('Position (m)');
legend('x', 'y', 'z');

subplot(3,1,2);
plot(t, y(4,:), t, y(5,:), t, y(6,:));
title('Nonlinear Model - Velocity without following a reference');
xlabel('Time (s)');
ylabel('Velocity (m/s)');
legend('$$v_x$$', '$$v_y$$', '$$v_z$$');

subplot(3,1,3);
plot(t, u);
title('Nonlinear Model - Control input');
xlabel('Time (s)');
ylabel('Control input');
legend('$$u_{ax}$$', '$$u_{ay}$$', '$$u_{az}$$');


%LQR controller - Simulation with linear model following a defined reference

    %State-space matrices
    A_lqr= A-B*K_lqr;
    B_lqr=-A_lqr;
    D = zeros(6,6); 

    SS=ss(A_lqr,B_lqr,C,D);
    x = zeros(nx,NSim);
    ref=ones(size(x)); % Reference variables - defined below arbitrarily
    x0=[1;1.2;1.4;0;0;0];

    u_i=[   1*ref(1)*ones(size(t))
            2*ref(2)*ones(size(t))
            3*ref(3)*ones(size(t))
            1*ref(4)*ones(size(t))
            2*ref(5)*ones(size(t))
            3*ref(6)*ones(size(t))];

    [y_ref,t,x_ref] = lsim(SS,u_i,t,x0); % Definition of the new linear system following a reference 

    x_ref=x_ref';
    u=-K_lqr*x_ref;
    y_ref=y_ref';

    figure(3);
    subplot(3,1,1);
    plot(t, y_ref(1,:), t, y_ref(2,:), t, y_ref(3,:));
    title('Linear Model - Position following a reference');
    xlabel('Time (s)');
    ylabel('Position (m)');
    legend('x', 'y', 'z');

    subplot(3,1,2);
    plot(t, y_ref(4,:), t, y_ref(5,:), t, y_ref(6,:));
    title('Linear Model - Velocity following a reference');
    xlabel('Time (s)');
    ylabel('Velocity (m/s)');
    legend('$$v_x$$', '$$v_y$$', '$$v_z$$');

    subplot(3,1,3);
    plot(t, u);
    title('Linear Model - Control input (in order to achieve a reference)');
    xlabel('Time (s)');
    ylabel('Control input');
    legend('$$u_{ax}$$', '$$u_{ay}$$', '$$u_{az}$$');



%% 2.2 Non linear controller

% Model and simulation parameters
kp=1;
kv=1;
Tend = 70;
dTo = 0.1;
dTi = 0.05;
Nsim = round(Tend/dTi)+1;
p_ref_static = [0.5;0.5;1];
% initialize variables for all drones:
t = 0:dTi:Tend;
nt = length(t);
nx = 6;
nu = 4;

p0 = [0;0;0];
v0 = [0;0;0];
x = zeros(nx,Nsim);
T = zeros(1,Nsim);
x(:,1) = [p0;v0];

% Square reference
L = 1;           % side length of the square
sg_t = Tend/4;      % time for each segment

%initialization
p_ref = zeros(3, length(t));
v_ref = zeros(3, length(t));
a_ref = zeros(3, length(t));

for k = 1:length(t)
    ct = mod(t(k), Tend); 
    if ct < sg_t
        p_ref(:, k) = [L/2 - (L/Tend)*ct; L/2; 1];
        v_ref(:, k) = [-L/Tend; 0; 0];
    elseif ct < 2*sg_t
        ct = ct - sg_t;
        p_ref(:, k) = [-L/2; L/2 - (L/Tend)*ct; 1];
        v_ref(:, k) = [0; -L/Tend; 0];
   elseif ct < 3*sg_t
        ct = ct - 2*sg_t;
        p_ref(:, k) = [-L/2 + (L/Tend)*ct; -L/2; 1];
        v_ref(:, k) = [L/Tend; 0; 0];
        a_ref(:, k) = [0; 0; 0];
    else
        ct = ct - 3*sg_t;
        p_ref(:, k) = [L/2; -L/2 + (L/Tend)*ct; 1];
        v_ref(:, k) = [0; L/Tend; 0];
        
    end
end

% main time loop for simulation
for k = 1:Nsim
    % get state vector and plot it
    p = x(1:3,k);
    v = x(4:6,k);
    p_d = p_ref(:,k);
    v_d = v_ref(:,k);
    a_d = a_ref(:,k);
    % outer-loop controller
    e_p = p - p_d;
    e_v = v - v_d;
    % Mellinger Controller (up to attitude commands)
    f_des = - kp*e_p - kv*e_v + m*g*zI + m*a_d;
    % compute desired rotation matrix
    zB_des(:,k) = f_des/norm(f_des);
    % compute thrust
    T(:,k) = f_des'*zB_des(:,k);
      
    % nonlinear drone model
    dot_p = v;
    dot_v = -g*zI - d*v + T(:,k)/m*zB_des(:,k);

    % discretization 
    pp = p + dTi*dot_p;
    vp = v + dTi*dot_v;
    if k~=Nsim
        x(:,k+1) = [pp;vp];
    end
end

p = x(1:3,:);


% Plot results
set(0,'defaultTextInterpreter','latex');
set(0,'defaultLegendInterpreter','latex');
sstblue         = [0,128,255]/255;
sstlightblue    = [48,208,216]/255;
sstlighterblue  = [50,220,240]/255;
sstlightestblue = [60,230,255]/255;
sstgreen        = [43,191,92]/255;
sstlightgreen   = [140,255,200]/255;
sstlightergreen = [160,255,225]/255;
sstgray         = [70,70,70]/255;
sstlightgray    = [200,200,200]/255;

dcolors = { sstgreen, sstblue, sstlightblue, sstlighterblue, sstlightestblue, sstlightgreen, sstlightergreen, sstlightgray };

%angle plots
figure(101);
sgtitle('Control and Angles');

subplot(311);
ylim([-0.5 0.5]);
plot(t, T, 'Color', [0.85 0.33 0.1], 'LineWidth', 1.8);  % orange
grid on;
ylabel('$$T(t)$$ [N]');
title('Thrust');

subplot(312);
plot(t, -zB_des(2,:), 'Color', [0 0.5 0.8], 'LineWidth', 1.8);  % blue
grid on;
ylabel('$$\phi(t)$$ [rad]');
title('Roll Angle');

subplot(313);
plot(t, zB_des(1,:), 'Color', [0.47 0.67 0.19], 'LineWidth', 1.8);  % green
grid on;
ylabel('$$\theta(t)$$ [rad]');
xlabel('$$t$$ [s]');
title('Pitch Angle');



%position plots
figure(102);
sgtitle('Positions');

subplot(311);
plot(t, p_ref(1,:), '--', 'Color', [0.5 0.5 0.5], 'LineWidth', 1.2);
hold on;
plot(t, x(1,:), '-', 'Color', [0.1 0.6 1], 'LineWidth', 2);  
grid on;
ylabel('$$x(t)$$ [m]');
title('X Position');

subplot(312);
plot(t, p_ref(2,:), '--', 'Color', [0.5 0.5 0.5], 'LineWidth', 1.2);
hold on;
plot(t, x(2,:), '-', 'Color', [0.8 0.2 0.6], 'LineWidth', 2);  
grid on;
ylabel('$$y(t)$$ [m]');
title('Y Position');

subplot(313);
plot(t, p_ref(3,:), '--', 'Color', [0.5 0.5 0.5], 'LineWidth', 1.2);
hold on;
plot(t, x(3,:), '-', 'Color', [0.2 0.7 0.2], 'LineWidth', 2); 
grid on;
xlabel('$$t$$ [s]');
ylabel('$$z(t)$$ [m]');
title('Z Position');



lbd = [-zB_des(2,:);zB_des(1,:);zeros(1,length(zB_des))];

sstgray = [70,70,70]/255;
nt = length(t);

figure(104);

hini = plot3(p(1,1),p(2,1),p(3,1),'o','Color',dcolors{1},'MarkerSize',2);
hold on;
href = plot3(p_ref(1,:),p_ref(2,:),p_ref(3,:),'--','Color',sstgray);
hp = plot3(p(1,1:2),p(2,1:2),p(3,1:2),'-','Color',dcolors{1});
hd = drone_plot(p(1:3,1),lbd(:,1),[],dcolors{1});

hold off;
grid on;
axis equal;
axis([-1.2 1.2 -1.2 1.2 0 3]);
xlabel('x [m]');
ylabel('y [m]');
zlabel('z [m]');
legend('start','end','trajectory');
for k = 2:2:nt
    set(hp,'XData',p(1,1:k),'YData',p(2,1:k),'ZData',p(3,1:k));
    drone_plot(p(1:3,k),lbd(:,k),hd);

    axis equal;
    drawnow;
end




%% Function Definition

 
function handle = drone_plot(pos,lbd,handle,dcolor)
% plots a drone given its pose information. 

    n_arms = 4;

    if ~exist('pos','var') || isempty(pos)
        pos = zeros(3,1);
    end
    if ~exist('lbd','var') || isempty(lbd)
        lbd = zeros(3,1);
    end
    if ~exist('handle','var') || isempty(handle)
        handles_arms = zeros(2*n_arms,1);
        handles_body = zeros(1,1);
        is_first = 1;
    else
        handles_arms = handle(1:2*n_arms,:);
        handles_body = handle(2*n_arms+1,:);
        is_first = 0;
    end
    if ~exist('dcolor','var') || isempty(dcolor)
        dcolor = [1,0,0];
    end
    
    internal_rot_axis = Euler2R([pi;0;0]);
    scale = 0.3;
    arm_colors = [ [70,70,70]/255;
                   [200,200,200]/255 ];
        
    rot = Euler2R(lbd)*internal_rot_axis;
    pos = pos';
    
    % draw arms:
    for i = 1:n_arms
        ang = 2*pi/n_arms*(i-1)+pi/4;
        drot = [	cos(ang)	,	 sin(ang)	,	0
                    -sin(ang)	,	 cos(ang)	,	0
                    0			,	 0			,	1	];
        dpos = zeros(1,3);
        handles_arms = draw_square_arm(rot,pos,scale,drot,dpos,arm_colors,handles_arms,i,is_first);
    end
    
    % draw main body:
    handles_body = draw_main_body(rot,pos,scale,dcolor,handles_body,is_first);
    
    handle = [handles_arms;handles_body];

end

function handles = draw_main_body(rot,pos,scale,dcolor,handles,is_first)
    
    r_tri = 0.12*cos(pi/4);
    h_tri = 0.001;
    raw_tri = [ r_tri*cos( 0     ) r_tri*sin( 0     ) -h_tri
                r_tri*cos( 2*pi/3) r_tri*sin( 2*pi/3) -h_tri
                r_tri*cos(-2*pi/3) r_tri*sin(-2*pi/3) -h_tri
                r_tri*cos( 0     ) r_tri*sin( 0     ) -h_tri];
    pts_tri = ((rot*(raw_tri*scale)')' + ...
                kron(ones(size(raw_tri,1),1),pos))';
            
    vert = pts_tri(:,1:3)';
    face = [1 2 3];
    
    if ~is_first
%         set(handles(1,:),'xdata',pts_tri(1,:),'ydata',pts_tri(2,:),'zdata',pts_tri(3,:));
        set(handles(1,:),'Vertices',vert);
    else
%         handles(1,:) = plot3(pts_tri(1,:),pts_tri(2,:),pts_tri(3,:),'LineWidth',0.6,'Color',dcolor);
        handles(1,:) = patch('Faces',face,'Vertices',vert,'FaceColor',dcolor);
    end
    
end

function handles = draw_square_arm(rot,pos,esc,drot,dpos,arm_colors,handles,idx,is_first)

    % arm modeling
    side = 0.005;
    len_ini = 0.0;%7*cos(pi/4);
    len_end = 0.2;            
    raw_pts = [ len_ini     0       0
                len_end     0       0   ];
    pts_arm = ( (rot*( (drot*(raw_pts*esc)')' + ...
            kron(ones(size(raw_pts,1),1),dpos) )')' + ...
            kron(ones(size(raw_pts,1),1),pos) )';
    
    % blade modelling
    t1 = 0:2*pi/7:2*pi;
    r1 = 0.5*len_end;
    h1 = side*1.3;
    l1 = 0.95*len_end;
    raw_props = [ l1+[0,sin(t1)*r1]' , ...
                    [0,cos(t1)*r1]' , ...
                    ones(length(t1)+1,1)*-h1 ];
    pts_props_raw = [];
    for i = 2:length(raw_props)-1
        pts_props_raw = [ pts_props_raw; raw_props(1,:) ; raw_props(i,:) ; raw_props(i+1,:) ];
    end
    pts_props = ( (rot*( (drot*(pts_props_raw*esc)')' + ...
            kron(ones(size(pts_props_raw,1),1),dpos) )')' + ...
            kron(ones(size(pts_props_raw,1),1),pos) )';
    
    if ~is_first
        set(handles(2*idx-1,:),'xdata',pts_arm(1,:),'ydata',pts_arm(2,:),'zdata',pts_arm(3,:));
        set(handles(2*idx,:),'xdata',pts_props(1,:),'ydata',pts_props(2,:),'zdata',pts_props(3,:));
    else
        handles(2*idx-1,:) = plot3(pts_arm(1,:),pts_arm(2,:),pts_arm(3,:),'-','LineWidth',0.4,'Color',arm_colors(1,:));
        handles(2*idx,:) = plot3(pts_props(1,:),pts_props(2,:),pts_props(3,:),'-','LineWidth',0.1,'Color',arm_colors(2,:));
    end
      
end

function rot = Euler2R(ang)
%	Converts an euler angles vector [phi,theta,psi] into a rotation matrix
%	of the Z-Y-X representation: R = rot_z(psi)*rot_y(theta)*rot_x(phi).

rotx = [	1	,	0			,	 0
			0	,	cos(ang(1))	,	-sin(ang(1))
			0	,	sin(ang(1))	,	 cos(ang(1))	];
roty = [	 cos(ang(2))	,	0	,	sin(ang(2))
			0				,	1	,	0
			-sin(ang(2))	,	0	,	cos(ang(2))	];
rotz = [	cos(ang(3))	,	-sin(ang(3))	,	0
			sin(ang(3))	,	 cos(ang(3))	,	0
			0			,	 0				,	1	];
rot = rotz*roty*rotx;
end
